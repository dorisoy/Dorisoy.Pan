<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:FluentAvalonia.UI.Controls;assembly=FluentAvalonia"
                    x:CompileBindings="True">

    <Design.PreviewWith>
        <Border Padding="50">
            <StackPanel Spacing="4">
                <Button Theme="{DynamicResource PaneToggleButtonStyle}" />
                <Button Theme="{DynamicResource NavigationViewPaneSearchButtonStyle}" />
                <Button Theme="{DynamicResource NavigationViewOverflowButtonStyleWhenPaneOnTop}" />
                <TextBlock Text="Header Style" Theme="{DynamicResource NavigationViewItemHeaderTextStyle}" />
                <ContentControl Theme="{DynamicResource NavigationViewTitleHeaderContentControlTextStyle}" Content="Title" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>

    <!-- Avalonia doesn't support (currently) double to GridLength conversion, 
             so some resources have a duplicate GridLength resource -->
    <Thickness x:Key="NavigationViewAutoSuggestBoxMargin">16,0</Thickness>
    <Thickness x:Key="TopNavigationViewAutoSuggestBoxMargin">4,0</Thickness>
    <x:Double x:Key="PaneToggleButtonHeight">36</x:Double>
    <GridLength x:Key="PaneToggleButtonHeightGridLength">36</GridLength>
    <x:Double x:Key="PaneToggleButtonWidth">40</x:Double>
    <x:Double x:Key="NavigationViewCompactPaneLength">48</x:Double>
    <x:Double x:Key="NavigationViewIconBoxWidth">40</x:Double>
    <x:Double x:Key="NavigationViewTopPaneHeight">48</x:Double>
    <x:Double x:Key="NavigationViewAutoSuggestAreaHeight">40</x:Double>
    <x:Double x:Key="TopNavigationViewPaneCustomContentMinWidth">48</x:Double>
    <x:Double x:Key="TopNavigationViewOverflowButtonWidth">40</x:Double>
    <x:Double x:Key="TopNavigationViewOverflowButtonHeight">40</x:Double>
    <x:Double x:Key="TopNavigationViewSettingsButtonWidth">40</x:Double>
    <x:Double x:Key="TopNavigationViewSettingsButtonHeight">40</x:Double>
    <x:Double x:Key="NavigationViewItemOnLeftMinHeight">36</x:Double>
    <x:Double x:Key="NavigationViewPaneHeaderRowMinHeight">40</x:Double>
    <x:Double x:Key="NavigationViewItemOnLeftIconBoxHeight">16</x:Double>
    <x:Double x:Key="NavigationViewSelectionIndicatorWidth">3</x:Double>
    <x:Double x:Key="NavigationViewSelectionIndicatorHeight">16</x:Double>
    <!-- Changed to CornerRadius -->
    <CornerRadius x:Key="NavigationViewSelectionIndicatorRadius">2</CornerRadius>
    <x:Double x:Key="NavigationViewItemSeparatorHeight">1</x:Double>
    <x:Double x:Key="TopNavigationViewItemSeparatorWidth">1</x:Double>
    <Thickness x:Key="NavigationViewToggleBorderThickness">0</Thickness>
    <Thickness x:Key="NavigationViewItemBorderThickness">1</Thickness>
    <Thickness x:Key="NavigationViewItemOnLeftIconBoxMargin">0</Thickness>
    <Thickness x:Key="NavigationViewItemButtonMargin">4,2</Thickness>
    <Thickness x:Key="NavigationViewItemInnerHeaderMargin">16,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemInnerHeaderMargin">12,0</Thickness>
    <Thickness x:Key="NavigationViewMinimalHeaderMargin">-24,44,0,0</Thickness>
    <Thickness x:Key="NavigationViewButtonHolderGridMargin">0,4</Thickness>
    <Thickness x:Key="NavigationViewPaneContentGridMargin">-1,3</Thickness>
    <Thickness x:Key="NavigationViewContentGridBorderThickness">1,1,0,0</Thickness>
    <Thickness x:Key="NavigationViewMinimalContentGridBorderThickness">0,1,0,0</Thickness>
    <Thickness x:Key="TopNavigationViewContentGridBorderThickness">0,1,0,0</Thickness>
    <Thickness x:Key="TopNavigationViewTopNavGridMargin">4,0</Thickness>
    <Thickness x:Key="NavigationViewBorderThickness">1</Thickness>
    <Thickness x:Key="NavigationViewHeaderMargin">56,44,0,0</Thickness>
    <Thickness x:Key="NavigationViewContentPresenterMargin">0</Thickness>
    <Thickness x:Key="NavigationViewContentMargin">0</Thickness>
    <Thickness x:Key="TopNavigationViewContentMargin">0</Thickness>
    <Thickness x:Key="NavigationViewPaneTitlePresenterMargin">8,4,0,0</Thickness>
    <Thickness x:Key="NavigationViewItemMargin">0</Thickness>
    <Thickness x:Key="TopNavigationViewItemMargin">0</Thickness>
    <Thickness x:Key="NavigationViewItemSeparatorMargin">0,3,0,4</Thickness>
    <Thickness x:Key="NavigationViewCompactItemSeparatorMargin">0,3,0,4</Thickness>
    <Thickness x:Key="TopNavigationViewItemSeparatorMargin">3,0,4,0</Thickness>
    <Thickness x:Key="TopNavigationViewOverflowButtonMargin">0</Thickness>
    
    <Thickness x:Key="NavigationViewItemContentPresenterMargin">4,5,8,0</Thickness>
    <Thickness x:Key="NavigationViewCompactItemContentPresenterMargin">0,0,0,0</Thickness>
    
    <Thickness x:Key="TopNavigationViewItemContentPresenterMargin">8,-1,12,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemContentOnlyContentPresenterMargin">12,0</Thickness>
    <Thickness x:Key="NavigationViewItemExpandChevronMargin">0,0,-14,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemExpandChevronMargin">-16,0,0,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemIconOnlyExpandChevronMargin">0,0,0,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemContentOnlyExpandChevronMargin">-12,0,0,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemOnOverflowContentPresenterMargin">12,0,20,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemOnOverflowNoIconContentPresenterMargin">16,0,20,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemOnOverflowExpandChevronMargin">-4,0,-8,0</Thickness>
    <Thickness x:Key="TopNavigationViewItemOnOverflowExpandChevronPadding">12,0,12,0</Thickness>
    <!-- The two resources below must be defined at the app level in order to take effect. -->
    <Thickness x:Key="TopNavigationViewOverflowMenuPadding">0,8</Thickness>
    <Thickness x:Key="NavigationViewItemChildrenMenuFlyoutPadding">0,8</Thickness>
    <x:Double x:Key="NavigationViewItemExpandedGlyphFontSize">18.0</x:Double>
    <x:String x:Key="NavigationViewItemExpandedGlyph">&#xE70D;</x:String>
    <CornerRadius x:Key="NavigationViewContentGridCornerRadius">8,0,0,0</CornerRadius>
    <CornerRadius x:Key="TopNavigationViewContentGridCornerRadius">0</CornerRadius>
    <CornerRadius x:Key="NavigationViewMinimalContentGridCornerRadius">0</CornerRadius>
    <Thickness x:Key="NavigationViewMinimalContentMargin">0</Thickness>

    <!-- - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - Pane ToggleButton Style - - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - - - - -->
    <ControlTheme x:Key="PaneToggleButtonStyle" TargetType="Button">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
        <Setter Property="MinHeight" Value="{StaticResource PaneToggleButtonHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource PaneToggleButtonWidth}" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}" />
        <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewToggleBorderThickness}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border Name="LayoutRoot"
                        Background="{TemplateBinding Background}"
                        Margin="{TemplateBinding Padding}"
                        Height="{TemplateBinding MinHeight}"
                        HorizontalAlignment="Stretch"
                        CornerRadius="{DynamicResource ControlCornerRadius}">
                    <Grid Name="ContentRoot"
                          ColumnDefinitions="Auto,*">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{DynamicResource PaneToggleButtonHeightGridLength}" />
                        </Grid.RowDefinitions>

                        <Border Width="{TemplateBinding MinWidth}">
                            <Viewbox Name="IconHost"
                                     Width="16"
                                     Height="16"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <TextBlock Name="Icon"
                                           Text="&#xE700;"
                                           FontFamily="{StaticResource SymbolThemeFontFamily}"
                                           FontSize="{TemplateBinding FontSize}"
                                           RenderTransform="none">
                                    <TextBlock.Transitions>
                                        <Transitions>
                                            <TransformOperationsTransition Duration="00:00:00.083"
                                                                           Property="RenderTransform" />
                                        </Transitions>
                                    </TextBlock.Transitions>
                                </TextBlock>
                            </Viewbox>
                        </Border>

                        <ContentPresenter Name="ContentPresenter"
                                          VerticalContentAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          FontSize="{TemplateBinding FontSize}"
                                          Padding="4,0,0,0"
                                          Grid.Column="1" />

                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Style Selector="^ /template/ Border#LayoutRoot">
                <Setter Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPointerOver}" />
            </Style>
            <Style Selector="^ /template/ ContentPresenter#ContentPresenter">
                <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPointerOver}" />
            </Style>
            <Style Selector="^ /template/ TextBlock#Icon">
                <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPointerOver}" />
            </Style>
        </Style>

        <Style Selector="^:pressed">
            <Style Selector="^ /template/ Border#LayoutRoot">
                <Setter Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundPressed}" />
            </Style>
            <Style Selector="^ /template/ ContentPresenter#ContentPresenter">
                <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPressed}" />
            </Style>
            <!-- WinUI uses AnimatedIcon here, but we can fake that by using simple scale transform -->
            <Style Selector="^ /template/ TextBlock#Icon">
                <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundPressed}" />
                <Setter Property="RenderTransform" Value="scaleX(0.5)" />
            </Style>
        </Style>

        <Style Selector="^:disabled">
            <Style Selector="^ /template/ Border#LayoutRoot">
                <Setter Property="Background" Value="{DynamicResource NavigationViewButtonBackgroundDisabled}" />
            </Style>
            <Style Selector="^ /template/ ContentPresenter#ContentPresenter">
                <Setter Property="Foreground" Value="{DynamicResource NavigationViewButtonForegroundDisabled}" />
            </Style>
        </Style>

        <!-- Skipping Checked states in WinUI template, these are unused & likely for preservation -->
    </ControlTheme>


    <!-- - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - Search Button Style - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - -->

    <ControlTheme x:Key="NavigationViewPaneSearchButtonStyle" TargetType="Button"
                  BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="Content" Value="&#xE11A;"/>
        <Setter Property="FontFamily" Value="{DynamicResource SymbolThemeFontFamily}" />
        <Setter Property="BorderThickness" Value="{DynamicResource NavigationViewToggleBorderThickness}" />
        <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForeground}" />
        <Setter Property="HorizontalAlignment" Value="Center" />

        <!-- 
        WinUI does lightweight restyling of Button[BG/BB/FG] resources
        Here tho, StaticResource aliases tend not to play well with theme changing when they're located
        outside of the resource dictionary they're pointing too since they only evaluate once and
        aren't aware of theme changes, so we override here -->
        <Style Selector="^:pointerover /template/ ContentPresenter">
            <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrushPointerOver}" />
            <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}" />
            <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForegroundPointerOver}" />
        </Style>
        <Style Selector="^:pressed /template/ ContentPresenter">
            <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrushPressed}" />
            <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackgroundPressed}" />
            <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForegroundPressed}" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter">
            <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrushDisabled}" />
            <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackgroundDisabled}" />
            <Setter Property="Foreground" Value="{DynamicResource NavigationViewItemForegroundDisabled}" />
        </Style>
    </ControlTheme>


    <!-- - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - Overflow Button Style - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - - -->

    <ControlTheme x:Key="NavigationViewOverflowButtonStyleWhenPaneOnTop" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource NavigationViewItemBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NavigationViewItemBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource NavigationViewItemBorderThickness}" />
        <Setter Property="Height" Value="{StaticResource TopNavigationViewOverflowButtonHeight}" />
        <Setter Property="Width" Value="{StaticResource TopNavigationViewOverflowButtonWidth}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel Name="RootGrid"
                       Height="{TemplateBinding Height}"
                       Width="{TemplateBinding Width}"
                       Background="{TemplateBinding Background}">
                    <Rectangle Name="PointerRectangle"
                               Fill="Transparent"
                               IsVisible="False"/>

                    <ui:FontIcon Name="Icon"
                                 VerticalAlignment="Center"
                                 HorizontalAlignment="Center"
                                 FontFamily="{DynamicResource SymbolThemeFontFamily}"
                                 FontSize="20"
                                 Glyph="&#xE10C;"
                                 Foreground="{TemplateBinding Foreground}"
                                 IsHitTestVisible="False" />
                </Panel>
            </ControlTemplate>
        </Setter>


        <Style Selector="^:pointerover">
            <Style Selector="^ /template/ Rectangle#PointerRectangle">
                <Setter Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPointerOver}" />
            </Style>
            <Style Selector="^ /template/ Panel#RootGrid">
                <Setter Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPointerOver}" />
            </Style>
            <Style Selector="^ /template/ ui|FontIcon#Icon">
                <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPointerOver}" />
            </Style>
        </Style>


        <Style Selector="^:pressed">
            <Style Selector="^ /template/ Rectangle#PointerRectangle">
                <Setter Property="Fill" Value="{DynamicResource NavigationViewItemBackgroundPressed}" />
            </Style>
            <Style Selector="^ /template/ Panel#RootGrid">
                <Setter Property="Background" Value="{DynamicResource TopNavigationViewItemBackgroundPressed}" />
            </Style>
            <Style Selector="^ /template/ ui|FontIcon#Icon">
                <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundPressed}" />
            </Style>
        </Style>
        
        <Style Selector="^:disabled">
            <Style Selector="^ /template/ ui|FontIcon#Icon">
                <Setter Property="Foreground" Value="{DynamicResource TopNavigationViewItemForegroundDisabled}" />
            </Style>
        </Style>

        <!-- ...NoLabelStyleWhenPaneOnTop discontinued SKIPPED -->
    </ControlTheme>


    <!-- - - - - - - - - - - - -->
    <!-- - - - - Other - - - - -->
    <!-- - - - - - - - - - - - -->

    <ControlTheme x:Key="NavigationViewItemHeaderTextStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="TextWrapping" Value="NoWrap"/>
    </ControlTheme>

    <ControlTheme x:Key="NavigationViewTitleHeaderContentControlTextStyle"
                  TargetType="ContentControl"
                  BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontFamily" Value="XamlAutoFontFamily" />
        <Setter Property="Margin" Value="{DynamicResource NavigationViewHeaderMargin}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </ControlTheme>


    <!-- For ease, this is also the same style used by the overflow flyout in NavigationView.axaml
         WinUI defines new styles for both, but they're exactly the same. -->
    <ControlTheme x:Key="NavViewFlyoutStyle"
                  TargetType="FlyoutPresenter"
                  BasedOn="{StaticResource {x:Type FlyoutPresenter}}">
        <!--
        BUG: For some reason that I cannot figure out, if you set the template here, as WinUI does
             if child menuitems are loaded straight into a flyout when in Left nav (LeftCompact)
             the items won't size correctly the first time they're shown. Top Nav & top overflow
             works perfectly, but left nav doesn't. We only really need to set the padding though
             to get behavior like WinUI so it really doesn't matter in the end, but still puzzling
        -->
        <Setter Property="Padding" Value="{DynamicResource NavigationViewItemChildrenMenuFlyoutPadding}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </ControlTheme>


</ResourceDictionary>
