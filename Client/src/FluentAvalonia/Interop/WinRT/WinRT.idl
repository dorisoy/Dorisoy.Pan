@clr-namespace FluentAvalonia.Interop.WinRT
@clr-access internal
@clr-map FLOAT float
@clr-map HSTRING IntPtr
@clr-map Vector2 System.Numerics.Vector2
@clr-map Vector3 System.Numerics.Vector3
@clr-map Quaternion System.Numerics.Quaternion
@clr-map Matrix4x4 System.Numerics.Matrix4x4
@clr-map HWND IntPtr
@clr-map BOOL int
@clr-map DWORD int
@clr-map boolean int
@clr-map BYTE byte
@clr-map INT16 short
@clr-map INT32 int
@clr-map INT64 long
@clr-map UINT16 ushort
@clr-map UINT32 uint
@clr-map UINT64 ulong
@clr-map DOUBLE double
@clr-map GUID System.Guid
@clr-map WCHAR System.Char
@clr-map Color FluentAvalonia.Interop.WinRT.WinRTColor
@clr-map Size FluentAvalonia.Interop.WinRT.WinRTSize
@clr-map ULONGLONG ulong
@clr-map HIMAGELIST IntPtr
@clr-map THUMBBUTTONFLAGS int
@clr-map THUMBBUTTONMASK int
@clr-map THUMBBUTTON int
@clr-map TBPFLAG int
@clr-map UINT uint
@clr-map LPTHUMBBUTTON int
@clr-map HICON void*
@clr-map LPCWSTR ushort*
@clr-map RECT FluentAvalonia.Interop.Win32.RECT


enum TrustLevel
{
    BaseTrust,
    PartialTrust,
    FullTrust
}

[uuid(AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90)]
interface IInspectable : IUnknown
{
    HRESULT GetIids(ulong* iidCount, Guid** iids);
    HRESULT GetRuntimeClassName([out] IntPtr* className);
    HRESULT GetTrustLevel([out] TrustLevel* trustLevel);
}

[uuid(00000035-0000-0000-C000-000000000046)]
interface IActivationFactory : IInspectable
{
    HRESULT ActivateInstance([out, retval] IntPtr* instance);
}

enum HandPreference
{
    LeftHanded = 0,
    RightHanded = 1
}

enum UIColorType
{
    Background = 0,
    Foreground = 1,
    AccentDark3 = 2,
    AccentDark2 = 3,
    AccentDark1 = 4,
    Accent = 5,
    AccentLight1 = 6,
    AccentLight2 = 7,
    AccentLight3 = 8,
    Complement = 9
}

enum UIElementType
{
    ActiveCaption = 0,
    Background = 1,
    ButtonFace = 2,
    ButtonText = 3,
    CaptionText = 4,
    GrayText = 5,
    Highlight = 6,
    HighlightText = 7,
    Hotlight = 8,
    InactiveCaption = 9,
    InactiveCaptionText = 10,
    Window = 11,
    WindowText = 12,
    AccentColor = 1000,
    TextHigh = 1001,
    TextMedium = 1002,
    TextLow = 1003,
    TextContrastWithHigh = 1004,
    NonTextHigh = 1005,
    NonTextMediumHigh = 1006,
    NonTextMedium = 1007,
    NonTextMediumLow = 1008,
    NonTextLow = 1009,
    PageBackground = 1010,
    PopupBackground = 1011,
    OverlayOutsidePopup = 1012
}

[uuid(85361600-1C63-4627-BCB1-3A89E0BC9C55)]
interface IUISettings : IInspectable
{
    [propget] HRESULT HandPreference([out][retval] HandPreference* value);
    [propget] HRESULT CursorSize([out][retval] Size* value);
    [propget] HRESULT ScrollBarSize([out][retval] Size* value);
    [propget] HRESULT ScrollBarArrowSize([out][retval] Size* value);
    [propget] HRESULT ScrollBarThumbBoxSize([out][retval] Size* value);
    [propget] HRESULT MessageDuration([out][retval] UINT32* value);
    [propget] HRESULT AnimationsEnabled([out][retval] boolean* value);
    [propget] HRESULT CaretBrowsingEnabled([out][retval] boolean* value);
    [propget] HRESULT CaretBlinkRate([out][retval] UINT32* value);
    [propget] HRESULT CaretWidth([out][retval] UINT32* value);
    [propget] HRESULT DoubleClickTime([out][retval] UINT32* value);
    [propget] HRESULT MouseHoverTime([out][retval] UINT32* value);
    HRESULT UIElementColor([in] UIElementType desiredElement, [out][retval] Color* value);
}

[uuid(BAD82401-2721-44F9-BB91-2BB228BE442F)]
interface IUISettings2 : IInspectable
{
    [propget] HRESULT TextScaleFactor([out][retval] DOUBLE* value);
    //[eventadd] HRESULT TextScaleFactorChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.UISettings*, IInspectable*>* handler, [out][retval] EventRegistrationToken* cookie);
    //[eventremove] HRESULT TextScaleFactorChanged([in] EventRegistrationToken cookie);
}

[uuid(03021BE4-5254-4781-8194-5168F7D06D7B)]
interface IUISettings3 : IInspectable
{
    HRESULT GetColorValue([in] UIColorType desiredColor, [out][retval] Color* value);
    //[eventadd] HRESULT ColorValuesChanged([in] TypedEventHandler<IUISettings3*, IInspectable*>* handler, [out][retval] EventRegistrationToken* cookie);
    //[eventremove] HRESULT ColorValuesChanged([in] EventRegistrationToken cookie);
}

[uuid(52BB3002-919B-4D6B-9B78-8DD66FF4B93B)]
interface IUISettings4 : IInspectable
{
    [propget] HRESULT AdvancedEffectsEnabled([out][retval] boolean* value);
    //[eventadd] HRESULT AdvancedEffectsEnabledChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.UISettings*, IInspectable*>* handler, [out][retval] EventRegistrationToken* cookie);
    //[eventremove] HRESULT AdvancedEffectsEnabledChanged([in] EventRegistrationToken cookie);
}

[uuid(FE0E8147-C4C0-4562-B962-1327B52AD5B9)]
interface IAccessibilitySettings : IInspectable
{
    [propget] HRESULT HighContrast([out][retval] boolean* value);
    [propget] HRESULT HighContrastScheme([out][retval] HSTRING* value);
    //[eventadd] HRESULT HighContrastChanged([in] Windows.Foundation.TypedEventHandler<Windows.UI.ViewManagement.AccessibilitySettings*, IInspectable*>* handler, [out][retval] EventRegistrationToken* cookie);
    //[eventremove] HRESULT HighContrastChanged([in] EventRegistrationToken cookie);
}

[uuid(56FDF342-FD6D-11d0-958A-006097C9A090)]
interface ITaskbarList : IUnknown
{
    HRESULT HrInit();

    HRESULT AddTab([in] HWND hwnd);

    HRESULT DeleteTab([in] HWND hwnd);

    HRESULT ActivateTab([in] HWND hwnd);

    HRESULT SetActiveAlt([in] HWND hwnd);
}

[uuid(602D4995-B13A-429b-A66E-1935E44F4317)]
interface ITaskbarList2 : ITaskbarList
{
    HRESULT MarkFullscreenWindow(
        [in] HWND hwnd,
        [in] BOOL fFullscreen);
}

[uuid(ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf)]
interface ITaskbarList3 : ITaskbarList2
{
    HRESULT SetProgressValue(
        [in] HWND hwnd,
        [in] ULONGLONG ullCompleted,
        [in] ULONGLONG ullTotal);

    HRESULT SetProgressState(
        [in] HWND hwnd,
        [in] TBPFLAG tbpFlags);

    HRESULT RegisterTab(
        [in] HWND hwndTab,
        [in] HWND hwndMDI);

    HRESULT UnregisterTab(
        [in] HWND hwndTab);

    HRESULT SetTabOrder(
        [in] HWND hwndTab,
        [in] HWND hwndInsertBefore);

    HRESULT SetTabActive(
        [in] HWND hwndTab,
        [in] HWND hwndMDI,
        [in] DWORD dwReserved);

    HRESULT ThumbBarAddButtons(
        [in] HWND hwnd,
        [in] UINT cButtons,
        [in, size_is(cButtons)] LPTHUMBBUTTON pButton);

    HRESULT ThumbBarUpdateButtons(
        [in] HWND hwnd,
        [in] UINT cButtons,
        [in, size_is(cButtons)] LPTHUMBBUTTON pButton);

    HRESULT ThumbBarSetImageList(
        [in] HWND hwnd,
        [in] HIMAGELIST himl);

    HRESULT SetOverlayIcon(
        [in] HWND hwnd,
        [in] HICON hIcon,
        [in, unique, string] LPCWSTR pszDescription);

    HRESULT SetThumbnailTooltip(
        [in] HWND hwnd,
        [in, unique, string] LPCWSTR pszTip);

    HRESULT SetThumbnailClip(
        [in] HWND hwnd,
        [in] RECT* prcClip);
}
